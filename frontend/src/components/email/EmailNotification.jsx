import React, { useState } from 'react';
import { Copy, CheckCircle, Mail, Download, X } from 'lucide-react';

const EmailNotification = ({ 
  isOpen, 
  onClose, 
  emailData, 
  title = "Email Notification",
  showCopyButtons = true 
}) => {
  const [copiedField, setCopiedField] = useState(null);

  const copyToClipboard = async (text, field) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedField(field);
      setTimeout(() => setCopiedField(null), 2000);
    } catch (error) {
      console.error('Failed to copy to clipboard:', error);
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = text;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      setCopiedField(field);
      setTimeout(() => setCopiedField(null), 2000);
    }
  };

  const downloadEmailContent = () => {
    const emailContent = `
To: ${emailData?.to || 'Recipient Email'}
Subject: ${emailData?.subject || 'Email Subject'}

${emailData?.body || 'Email Body'}

---
Generated by TrackNest Pro System
Date: ${new Date().toLocaleString()}
    `.trim();

    const blob = new Blob([emailContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `email_${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center gap-3">
            <Mail className="text-blue-600" size={24} />
            <h2 className="text-xl font-semibold text-gray-900">{title}</h2>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <X size={24} />
          </button>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          {/* Email Status */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <div className="flex items-center gap-3">
              <Mail className="text-blue-600" size={20} />
              <div>
                <h3 className="font-medium text-blue-800">Email Ready to Send</h3>
                <p className="text-sm text-blue-600 mt-1">
                  Use the information below to send the email manually or copy the content to your email client.
                </p>
              </div>
            </div>
          </div>

          {/* Email Details */}
          <div className="space-y-4">
            {/* To Field */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                To (Recipient Email)
              </label>
              <div className="flex items-center gap-2">
                <input
                  type="email"
                  value={emailData?.to || ''}
                  readOnly
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-sm"
                />
                {showCopyButtons && (
                  <button
                    onClick={() => copyToClipboard(emailData?.to || '', 'to')}
                    className="p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded transition-colors"
                    title="Copy email address"
                  >
                    {copiedField === 'to' ? <CheckCircle size={16} /> : <Copy size={16} />}
                  </button>
                )}
              </div>
            </div>

            {/* Subject Field */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Subject
              </label>
              <div className="flex items-center gap-2">
                <input
                  type="text"
                  value={emailData?.subject || ''}
                  readOnly
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-sm"
                />
                {showCopyButtons && (
                  <button
                    onClick={() => copyToClipboard(emailData?.subject || '', 'subject')}
                    className="p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded transition-colors"
                    title="Copy subject"
                  >
                    {copiedField === 'subject' ? <CheckCircle size={16} /> : <Copy size={16} />}
                  </button>
                )}
              </div>
            </div>

            {/* Body Field */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Email Body
              </label>
              <div className="space-y-2">
                <textarea
                  value={emailData?.body || ''}
                  readOnly
                  rows={12}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-sm font-mono"
                />
                {showCopyButtons && (
                  <div className="flex items-center gap-2">
                    <button
                      onClick={() => copyToClipboard(emailData?.body || '', 'body')}
                      className="flex items-center gap-2 px-3 py-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded transition-colors text-sm"
                    >
                      {copiedField === 'body' ? <CheckCircle size={16} /> : <Copy size={16} />}
                      Copy Email Body
                    </button>
                    <button
                      onClick={downloadEmailContent}
                      className="flex items-center gap-2 px-3 py-2 text-green-600 hover:text-green-800 hover:bg-green-50 rounded transition-colors text-sm"
                    >
                      <Download size={16} />
                      Download Email
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Instructions */}
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div className="flex items-start gap-3">
              <div className="text-yellow-600 mt-0.5">ðŸ“§</div>
              <div>
                <h4 className="font-medium text-yellow-800 mb-2">How to Send This Email</h4>
                <ul className="text-sm text-yellow-700 space-y-1">
                  <li>â€¢ Copy the recipient email address above</li>
                  <li>â€¢ Copy the subject line</li>
                  <li>â€¢ Copy the email body content</li>
                  <li>â€¢ Open your email client (Gmail, Outlook, etc.)</li>
                  <li>â€¢ Paste the information and send the email</li>
                  <li>â€¢ Or use the "Download Email" button to save as a text file</li>
                </ul>
              </div>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="flex justify-end gap-3 p-6 border-t border-gray-200">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
};

export default EmailNotification;
